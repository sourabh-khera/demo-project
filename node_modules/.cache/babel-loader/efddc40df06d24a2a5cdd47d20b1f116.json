{"ast":null,"code":"import _classCallCheck from \"/Users/TTN/merp_react_web_dev/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/TTN/merp_react_web_dev/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/TTN/merp_react_web_dev/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/TTN/merp_react_web_dev/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/TTN/merp_react_web_dev/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/TTN/merp_react_web_dev/src/Login.js\";\nimport React, { Component } from 'react';\nimport Home from './Home';\nimport { BrowserRouter as Router, NavLink, Switch, Link, Route } from 'react-router-dom';\nimport Collection from './Collection';\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  function Login() {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this));\n    _this.state = {\n      useremail: '',\n      userpassword: '',\n      isUser: 'abc',\n      isDialogVisible: false,\n      messages_template: {},\n      collections: '',\n      email: '',\n      id: '',\n      school: '',\n      fields: {},\n      errors: {}\n    };\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"handleValidation\",\n    value: function handleValidation() {\n      var fields = this.state.fields;\n      var errors = {};\n      var formIsValid = true;\n      fields[\"action\"] = \"userLogin\"; //Email\n\n      if (!fields[\"email\"]) {\n        formIsValid = false;\n        errors[\"email\"] = \"Cannot be empty\";\n      }\n\n      if (typeof fields[\"email\"] !== \"undefined\") {\n        var lastAtPos = fields[\"email\"].lastIndexOf('@');\n        var lastDotPos = fields[\"email\"].lastIndexOf('.');\n\n        if (!(lastAtPos < lastDotPos && lastAtPos > 0 && fields[\"email\"].indexOf('@@') == -1 && lastDotPos > 2 && fields[\"email\"].length - lastDotPos > 2)) {\n          formIsValid = false;\n          errors[\"email\"] = \"Email is not valid\";\n        }\n      } //password\n\n\n      if (!fields[\"password\"]) {\n        formIsValid = false;\n        errors[\"password\"] = \"Cannot be empty\";\n      }\n\n      this.setState({\n        errors: errors\n      });\n      return formIsValid;\n    }\n  }, {\n    key: \"contactSubmit\",\n    value: function contactSubmit(e) {\n      e.preventDefault();\n\n      if (this.handleValidation()) {\n        this.LoginApi();\n        console.log(this.state.fields);\n      } else {\n        alert(\"Sorry, Wrong Username or Password\");\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(field, e) {\n      var fields = this.state.fields;\n      fields[field] = e.target.value;\n      this.setState({\n        fields: fields\n      });\n    }\n  }, {\n    key: \"getMessageList\",\n    value: function getMessageList() {\n      var messages_template = this.state.messages_template;\n      var ObjMessages = this.state.ObjMessages;\n      var session = localStorage.getItem(\"session\");\n      var session_array = JSON.parse(session);\n      var organization_id = session_array.organization_id;\n      messages_template[\"action\"] = \"getMessageList\";\n      messages_template[\"organization_id\"] = organization_id;\n      fetch(global.api_url, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.state.messages_template)\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        var status = response.status;\n        var message_list = response.message_list;\n\n        if (status === \"true\") {\n          localStorage.setItem('safeguard_messages', JSON.stringify(message_list));\n        } else {\n          localStorage.setItem('safeguard_messages', '');\n        }\n      });\n      console.log(this.state.ObjMessages);\n    }\n  }, {\n    key: \"LoginApi\",\n    value: function LoginApi() {\n      var _this2 = this;\n\n      fetch(global.api_url, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.state.fields)\n      }).then(function (response) {\n        return response.json();\n      }).then(function (response) {\n        var status = response.status;\n\n        if (status === \"true\") {\n          localStorage.setItem('session', JSON.stringify(response.user_details));\n          localStorage.setItem('safeguard', JSON.stringify(response.safeguard));\n\n          _this2.getMessageList();\n\n          _this2.props.history.push('/Collection');\n        } else {\n          alert(\"please enter valid user details\");\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"ember361\",\n        className: \"ember-view ember-app\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"Mobile Emergency Response Plan\"), React.createElement(\"form\", {\n        name: \"contactform\",\n        onSubmit: this.contactSubmit.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"email\",\n        className: \"ember-view ember-text-field logtxt\",\n        placeholder: \"Email Address\",\n        autoCapitalize: \"off\",\n        autoCorrect: \"off\",\n        type: \"text\",\n        onChange: this.handleChange.bind(this, \"email\"),\n        value: this.state.fields[\"email\"],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        id: \"password\",\n        className: \"ember-view ember-text-field passwordtxt\",\n        placeholder: \"Password\",\n        type: \"password\",\n        onChange: this.handleChange.bind(this, \"password\"),\n        value: this.state.fields[\"password\"],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        id: \"login\",\n        \"data-ember-action\": \"1537\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"Sign In\")), React.createElement(\"a\", {\n        className: \"forgot\",\n        href: \"\",\n        \"data-ember-action\": \"1538\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Forgot your password?\")), React.createElement(\"div\", {\n        className: \"watermark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nexport default Login;","map":{"version":3,"sources":["/Users/TTN/merp_react_web_dev/src/Login.js"],"names":["React","Component","Home","BrowserRouter","Router","NavLink","Switch","Link","Route","Collection","ReactHtmlParser","processNodes","convertNodeToElement","htmlparser2","Login","state","useremail","userpassword","isUser","isDialogVisible","messages_template","collections","email","id","school","fields","errors","formIsValid","lastAtPos","lastIndexOf","lastDotPos","indexOf","length","setState","e","preventDefault","handleValidation","LoginApi","console","log","alert","field","target","value","ObjMessages","session","localStorage","getItem","session_array","JSON","parse","organization_id","fetch","global","api_url","method","headers","Accept","body","stringify","then","response","json","status","message_list","setItem","user_details","safeguard","getMessageList","props","history","push","contactSubmit","bind","handleChange"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport Home from './Home';\nimport { BrowserRouter as Router, NavLink, Switch, Link, Route } from 'react-router-dom';\nimport Collection from './Collection';\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\nclass Login extends Component{\n\n    constructor(){\n        super();\n        this.state = {\n          useremail:'',\n          userpassword:'',\n          isUser:'abc',\n          isDialogVisible: false,\n\t\t  messages_template : {},\n          collections:'',\n          email:'',\n          id:'',\n          school:'',\n          fields: {},\n          errors: {}\n        }\n     }\n\n\n     handleValidation(){\n        let fields = this.state.fields;\n        let errors = {};\n        let formIsValid = true;\n      \n       fields[\"action\"]=\"userLogin\";\n      \n        //Email\n        if(!fields[\"email\"]){\n           formIsValid = false;\n           errors[\"email\"] = \"Cannot be empty\";\n        }\n      \n        if(typeof fields[\"email\"] !== \"undefined\"){\n           let lastAtPos = fields[\"email\"].lastIndexOf('@');\n           let lastDotPos = fields[\"email\"].lastIndexOf('.');\n      \n           if (!(lastAtPos < lastDotPos && lastAtPos > 0 && fields[\"email\"].indexOf('@@') == -1 && lastDotPos > 2 && (fields[\"email\"].length - lastDotPos) > 2)) {\n              formIsValid = false;\n              errors[\"email\"] = \"Email is not valid\";\n            }\n       }  \n\n\n        //password\n        if(!fields[\"password\"]){\n            formIsValid = false;\n            errors[\"password\"] = \"Cannot be empty\";\n         }\n      \n       this.setState({errors: errors});\n\n       return formIsValid;\n      }\n      \n      contactSubmit(e){\n        e.preventDefault();\n        \n        if(this.handleValidation()){\n\n         this.LoginApi();\n\n         console.log(this.state.fields);\n        }else{\n           alert(\"Sorry, Wrong Username or Password\");\n        }\n      \n      }\n      \n      handleChange(field, e){         \n        let fields = this.state.fields;\n        fields[field] = e.target.value;        \n        this.setState({fields});\n      }\n\t  \n  getMessageList(){\n  let messages_template = this.state.messages_template;\n  let ObjMessages = this.state.ObjMessages;\n  let session= localStorage.getItem(\"session\");\n  let session_array=JSON.parse(session);\n  let organization_id = session_array.organization_id;\n\n  messages_template[\"action\"]=\"getMessageList\";\n  messages_template[\"organization_id\"]=organization_id;\n  fetch(global.api_url,\n     {\n         method: 'POST',\n         headers: {\n             Accept: 'application/json',\n             'Content-Type': 'application/json'\n         },\n         body: JSON.stringify(this.state.messages_template)\n     })\n      .then((response) => response.json())\n      .then((response) => { \n        const status=response.status;\n        const message_list = response.message_list;\n       if(status === \"true\")\n       {\n\t\tlocalStorage.setItem('safeguard_messages', JSON.stringify(message_list));  \n       }else{\n\t\t   localStorage.setItem('safeguard_messages', '');\n\t   }\n });\n console.log(this.state.ObjMessages);\n  }\n\n      LoginApi()\n      {\n        fetch(global.api_url,\n        {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'                 \n            },\n            body: JSON.stringify(this.state.fields)\n        })\n        .then((response) => response.json())\n        .then((response) => {\n\n             const status=response.status;\n             if(status === \"true\")\n             {\n\t\t\t\tlocalStorage.setItem('session', JSON.stringify(response.user_details));\n\t\t\t\tlocalStorage.setItem('safeguard', JSON.stringify(response.safeguard));\n\t\t\t\tthis.getMessageList();\n                this.props.history.push('/Collection');\n             }\n             else{\n                alert(\"please enter valid user details\");\n             }\n        });\n      }\n\n    render(){\n        return(\n            <div id=\"ember361\"  className=\"ember-view ember-app\"><div  className=\"login\">\n            <h2>Mobile Emergency Response Plan</h2>\n            <form name=\"contactform\" onSubmit= {this.contactSubmit.bind(this)}>\n              <input \n               id=\"email\" \n                className=\"ember-view ember-text-field logtxt\" \n               placeholder=\"Email Address\"\n               autoCapitalize=\"off\"\n               autoCorrect=\"off\"\n               type=\"text\"\n               onChange={this.handleChange.bind(this, \"email\")}\n               value={this.state.fields[\"email\"]}\n              />\n              <input\n                id=\"password\" \n                 className=\"ember-view ember-text-field passwordtxt\"\n                placeholder=\"Password\" \n                type=\"password\"\n\t\t\n                onChange={this.handleChange.bind(this, \"password\")}\n                value={this.state.fields[\"password\"]}\n                />\n              <button \n              id=\"login\" \n              data-ember-action=\"1537\"\n              >Sign In</button>\n            </form>          \n            <a  className=\"forgot\" href=\"\" data-ember-action=\"1538\">Forgot your password?</a>\n          </div>\n          <div  className=\"watermark\"></div>\n          \n          </div>  \n        );\n    }\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}