import { Assertions, Chain, Logger, Pipeline } from '@ephox/agar';
import { UnitTest } from '@ephox/bedrock';
import * as React from 'react';
import { cRemove, cSetup, cEditor } from '../alien/Loader';
import { ApiChains } from '@ephox/mcagar';
import { getTinymce } from '../../../main/ts/TinyMCE';
import { EventState } from '../alien/TestHelpers';
UnitTest.asynctest('Editor.test', function (success, failure) {
    var isEditor = function (val) {
        return val instanceof getTinymce().Editor;
    };
    var state = EventState();
    Pipeline.async({}, [
        Logger.t('Assert structure of editor and react wrapper events', Chain.asStep({}, [
            cSetup(function (Editor) { return (React.createElement(Editor, { onEditorChange: state.handler('onEditorChange'), onSetContent: state.handler('onSetContent') })); }),
            cEditor(ApiChains.cSetContent('<p>New Content</p>')),
            state.cEach('onEditorChange', function (args) { return Assertions.assertEq('First arg should be new content', '<p>New Content</p>', args[0]); }),
            state.cEach('onEditorChange', function (args) { return Assertions.assertEq('Second arg should be editor', true, isEditor(args[1])); }),
            state.cEach('onSetContent', function (args) { return Assertions.assertEq('First arg should be something', true, !!args[0]); }),
            state.cEach('onSetContent', function (args) { return Assertions.assertEq('Second arg should be editor', true, isEditor(args[1])); }),
            cRemove
        ]))
    ], success, failure);
});
