"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var agar_1 = require("@ephox/agar");
var bedrock_1 = require("@ephox/bedrock");
var React = require("react");
var Loader_1 = require("../alien/Loader");
var mcagar_1 = require("@ephox/mcagar");
var TinyMCE_1 = require("../../../main/ts/TinyMCE");
var TestHelpers_1 = require("../alien/TestHelpers");
bedrock_1.UnitTest.asynctest('Editor.test', function (success, failure) {
    var isEditor = function (val) {
        return val instanceof TinyMCE_1.getTinymce().Editor;
    };
    var state = TestHelpers_1.EventState();
    agar_1.Pipeline.async({}, [
        agar_1.Logger.t('Assert structure of editor and react wrapper events', agar_1.Chain.asStep({}, [
            Loader_1.cSetup(function (Editor) { return (React.createElement(Editor, { onEditorChange: state.handler('onEditorChange'), onSetContent: state.handler('onSetContent') })); }),
            Loader_1.cEditor(mcagar_1.ApiChains.cSetContent('<p>New Content</p>')),
            state.cEach('onEditorChange', function (args) { return agar_1.Assertions.assertEq('First arg should be new content', '<p>New Content</p>', args[0]); }),
            state.cEach('onEditorChange', function (args) { return agar_1.Assertions.assertEq('Second arg should be editor', true, isEditor(args[1])); }),
            state.cEach('onSetContent', function (args) { return agar_1.Assertions.assertEq('First arg should be something', true, !!args[0]); }),
            state.cEach('onSetContent', function (args) { return agar_1.Assertions.assertEq('Second arg should be editor', true, isEditor(args[1])); }),
            Loader_1.cRemove
        ]))
    ], success, failure);
});
